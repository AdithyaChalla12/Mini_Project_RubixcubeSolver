Only one of the 43 quintillion possible states of the original-size Rubik's cube (3x3x3) is desired solved state. 
The challenge in solving the cube is to find an algorithm that solves the cube in the fewest steps possible.
The Kociemba algorithm, which requires some pre-processing tasks like depth first search and tree pruning, can solve the cube less moves.
As a result, we will be developing a programme to solve a Rubik's cube using Python and OpenCV as a team.
To accomplish this, we will extract all of the cubies' colours and then use Kociemba's algorithm to return a solution to the users.To do this, we will extract all of the cubies colours and then apply HSV color scale to provide a solution to convert the BGR to HSV and detect the faces of the cube in each and every environment possible. 
The aim of a Rubik's Cube problem is to start with a randomised, scrambled, and jumbled cube configuration and, by rotating the faces, return it to the original solved pattern with each side being a single colour.
